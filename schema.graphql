schema {
  query: Query
  mutation: MyMutations
  subscription: Subscription
}

type changeUsername {
  ok: Boolean
  user: Users
}

type createPost {
  description: String
  imageUrl: String
  ok: Boolean
}

type createUser {
  ok: Boolean
  user: Users
}

# The `DateTime` scalar type represents a DateTime
# value as specified by
# [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
scalar DateTime

type Messages implements Node {
  # The ID of the object.
  id: ID!
  message: String
  createdAt: DateTime
  updatedAt: DateTime
}

type MessagesConnection {
  pageInfo: PageInfo!
  edges: [MessagesEdge]!
}

type MessagesEdge {
  # The item at the end of the edge
  node: Messages

  # A cursor for use in pagination
  cursor: String!
}

type MyMutations {
  createUser(username: String, name: String, email: String): createUser
  createPost(imageUrl: String, description: String): createPost
  changeUsername(username: String, email: String): changeUsername
  uploadFile(file: Upload): UploadFile
}

# An object with an ID
interface Node {
  # The ID of the object.
  id: ID!
}

type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Posts implements Node {
  # The ID of the object.
  id: ID!
  description: String
  imageUrl: String
}

type PostsConnection {
  pageInfo: PageInfo!
  edges: [PostsEdge]!
}

type PostsEdge {
  # The item at the end of the edge
  node: Posts

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  # The ID of the object
  node(id: ID!): Node
  user(before: String, after: String, first: Int, last: Int): UsersConnection
  message(before: String, after: String, first: Int, last: Int): MessagesConnection
  findUser(username: String): Users
  findPost(id: Int): Posts
  findMessage(id: Int): Messages
  allUsers(before: String, after: String, first: Int, last: Int): UsersConnection
  allPosts(before: String, after: String, first: Int, last: Int): PostsConnection
  hello(name: String = "stranger", age: Int): String
  allMessages(likeMessage: String, limit: Int): [Messages]
}

type Subscription {
  allPosts(before: String, after: String, first: Int, last: Int): PostsConnection
}

scalar Upload

type UploadFile {
  ok: Boolean
}

type Users implements Node {
  # The ID of the object.
  id: ID!
  name: String
  email: String
  username: String
}

type UsersConnection {
  pageInfo: PageInfo!
  edges: [UsersEdge]!
}

type UsersEdge {
  # The item at the end of the edge
  node: Users

  # A cursor for use in pagination
  cursor: String!
}

